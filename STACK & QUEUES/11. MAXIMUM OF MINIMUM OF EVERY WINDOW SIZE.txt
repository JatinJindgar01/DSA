//Maximum of minimum for every window size
//brute force
//tc=o(N*N*N) sc=o(1)
class Solution 
{
    //Function to find maximum of minimums of every window size.
    static int[] maxOfMin(int[] arr, int n) 
    {
        // Your code here
        int ans[]=new int[n];
        for(int i=1;i<=n;i++)
        {
            int low=0;
            int high=i-1;
            int max=Integer.MIN_VALUE;
            while(high<n)
            {
                int min=Integer.MAX_VALUE;
                for(int j=low;j<=high;j++)
                {
                    min=Math.min(min,arr[j]);
                }
                low++;
                high++;
                max=Math.max(max,min);
            }
            ans[i-1]=max;
        }
        return ans;
    }
}

//optimal
//tc=o(n) sc=o(n)
class Solution 
{
    //Function to find maximum of minimums of every window size.
    static int[] prevSmaller(int arr[])
    {
        int n=arr.length;
        int ans[]=new int[n];
        ans[0]=-1;
        Stack<Integer> st=new Stack<>();
        st.push(0);
        for(int i=1;i<n;i++)
        {
            while(st.size()>0 && arr[st.peek()]>=arr[i])
            {
                st.pop();
            }
            if(st.size()==0)
                ans[i]=-1;
            else
                ans[i]=st.peek();
            st.push(i);
        }
        return ans;
    }
    
     static int[] nextSmaller(int arr[])
    {
        int n=arr.length;
        int ans[]=new int[n];
        ans[n-1]=n;
        Stack<Integer> st=new Stack<>();
        st.push(n-1);
        for(int i=n-2;i>=0;i--)
        {
            while(st.size()>0 && arr[st.peek()]>=arr[i])
            {
                st.pop();
            }
            if(st.size()==0)
                ans[i]=n;
            else
                ans[i]=st.peek();
            st.push(i);
        }
        return ans;
    }
    static int[] maxOfMin(int[] arr, int n) 
    {
        // Your code here
        int prev[]=prevSmaller(arr);
        int next[]=nextSmaller(arr);
        int ans[]=new int[n];  //every index denotes len+1, i=0 means len=1
        for(int i=0;i<n;i++)
        {
            int iAmMinimumForLength=next[i]-prev[i]-1;
            ans[iAmMinimumForLength-1]=Math.max(ans[iAmMinimumForLength-1],arr[i]);
        }
        for(int i=n-2;i>=0;i--)
        {
            ans[i]=Math.max(ans[i],ans[i+1]);
        }
        return ans;

        
    }
}