//largest rectangle in histogram
//TC=O(N) SC=O(N)
class Solution {
        public int[] prevSmaller(int[] A) {
        int n=A.length;
        int ans[]=new int[n];   
        ans[0]=-1;
        Stack<Integer> st=new Stack<>();
        st.push(0);
        for(int i=1;i<n;i++)
        {
            while(st.size()!=0 && A[st.peek()]>=A[i])
            st.pop();
            if(st.size()==0)
            {
                ans[i]=-1;
            }
            else
            {
            ans[i]=st.peek();
            }
            st.push(i);

        }
        return ans;
    }
    public int[] nextSmaller(int[] A) {
        int n=A.length;
        int ans[]=new int[n];
        ans[n-1]=n;
        Stack<Integer> st=new Stack<>();
        st.push(n-1);
        for(int i=n-2;i>=0;i--)
        {
            while(st.size()!=0 && A[st.peek()]>=A[i])
            st.pop();
            if(st.size()==0)
            {
                ans[i]=n;
            }
            else
            {
                ans[i]=st.peek();
           }
            st.push(i);

        }
        return ans;
    }
    public int largestRectangleArea(int[] heights) {
        int n=heights.length;
        int prev[]=prevSmaller(heights);
        int next[] =nextSmaller(heights);
        int max=-1;
        for(int i=0;i<n;i++)
        {
            max=Math.max(max,heights[i]*((i-prev[i]-1)+(next[i]-i-1)+1));
        }
        return max;

    }
}