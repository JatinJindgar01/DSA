//DISTINCT NUMBERS IN WINDOW
//TC=O(N*K) SC=O(N)
public class Solution {
    public int countDistinctElements(int A[], int low, int high)
    {
        HashSet<Integer> h=new HashSet<>();
        int cnt=0;
        for(int i=low;i<=high;i++)
        {
            if(!h.contains(A[i]))
                cnt++;
            h.add(A[i]);
        }
        return cnt;
    }
    public int[] dNums(int[] A, int k) {
        int n=A.length;
        if(k>n)
            return new int[0];
        int ans[]=new int[n-k+1];
        int low=0;
        int high=k-1;
        int i=0;
        while(high<n)
        {
            ans[i]=countDistinctElements(A,low,high);
            i++;
            low++;
            high++;
        }
        return ans;
    }
}


//TC=O(N) SC=O(N)
public class Solution {
    public int[] dNums(int[] A, int k) {
        int n=A.length;
        if(k>n)
            return new int[0];
        int ans[]=new int[n-k+1];
        HashMap<Integer,Integer> h=new HashMap<>();

 	// Traverse the first window and store count
        // of every element in hash map
        for(int i=0;i<k;i++)
        {
            h.put(A[i],h.getOrDefault(A[i],0)+1);
        }
        ans[0]=h.size();
        int j=1;
        for(int i=k;i<n;i++)
        {

	    // Remove first element of previous window
            // If there was only one occurrence
            if(h.get(A[i-k])==1)
            {
                h.remove(A[i-k]);
            }
            else   // reduce count of the removed element
            {
                h.put(A[i-k],h.get(A[i-k])-1);
            }

	    // Add new element of current window
            // If this element appears first time,
            // set its count as 1,
            h.put(A[i],h.getOrDefault(A[i],0)+1);
            ans[j]=h.size();
            j++;
        }
        return ans;
    }
}

