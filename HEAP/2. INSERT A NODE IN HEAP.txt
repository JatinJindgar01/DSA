//INSERT NODE IN A HEAP
//INSERT AT END AND THEN COMPARE IT WITH IT'S PARENT, SWAP IT IF PARENT IS SMALLER AND HEAPIFY THE PARENT

//RECURSIVE TC=O(LOG(N)) SC=O(Log(N))
public class insertionHeap {

	static void heapify(int[] arr, int n, int i)
	{
		// Find parent
		int parent = (i - 1) / 2;
		if (parent>=0) {
			
			if (arr[i] > arr[parent]) {
				
				// swap arr[i] and arr[parent]
				int temp = arr[i];
				arr[i] = arr[parent];
				arr[parent] = temp;
			
				// Recursively heapify the parent node
				heapify(arr, n, parent);
			}
		}
	}

	// Function to insert a new node to the heap.
	static int insertNode(int[] arr, int n, int Key)
	{
		// Increase the size of Heap by 1
		n = n + 1;
	
		// Insert the element at end of Heap
		arr[n - 1] = Key;
	
		// Heapify the new node following a
		// Bottom-up approach
		heapify(arr, n, n - 1);
		
		// return new size of Heap
		return n;
	}

	/* A utility function to print array of size n */
	static void printArray(int[] arr, int n)
	{
		for (int i = 0; i < n; ++i)
			System.out.println(arr[i] + " ");

		System.out.println();
	}

	
	public static void main(String args[])
	{
        int MAX = 1000;
		int[] arr = new int[MAX];
		
		// initializing some values
		arr[0] = 10;
		arr[1] = 5;
		arr[2] = 3;
		arr[3] = 2;
		arr[4] = 4;
		
		// Current size of the array
		int n = 5;

		int Key = 15;
		
		n = insertNode(arr, n, Key);

		printArray(arr, n);
		
	}
}

//ITERATIVE TC=O(LOG(N)) SC=O(1)

public class insertionHeap {

	static void heapify(int[] arr, int n, int i)
	{
              while(i>0)
	      {
		        int parent = (i - 1) / 2;	
			if (arr[i] > arr[parent]) {
				
				// swap arr[i] and arr[parent]
				int temp = arr[i];
				arr[i] = arr[parent];
				arr[parent] = temp;
				i=parent;
			}
			else
			{
                             break;
                        }
		}
	}

	// Function to insert a new node to the heap.
	static int insertNode(int[] arr, int n, int Key)
	{
		// Increase the size of Heap by 1
		n = n + 1;
	
		// Insert the element at end of Heap
		arr[n - 1] = Key;
	
		// Heapify the new node following a
		// Bottom-up approach
		heapify(arr, n, n - 1);
		
		// return new size of Heap
		return n;
	}

	/* A utility function to print array of size n */
	static void printArray(int[] arr, int n)
	{
		for (int i = 0; i < n; ++i)
			System.out.println(arr[i] + " ");

		System.out.println();
	}

	
	public static void main(String args[])
	{
        int MAX = 1000;
		int[] arr = new int[MAX];
		
		// initializing some values
		arr[0] = 10;
		arr[1] = 5;
		arr[2] = 3;
		arr[3] = 2;
		arr[4] = 4;
		
		// Current size of the array
		int n = 5;

		int Key = 15;
		
		n = insertNode(arr, n, Key);

		printArray(arr, n);
		
	}
}
