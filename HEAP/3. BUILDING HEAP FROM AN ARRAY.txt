//BUILDING HEAP FROM AN ARRAY
//LEAF NODES ARE ALREADY FOLLOW HEAP PROPERTY.
//Last non-leaf node = parent of last-node.
//or, Last non-leaf node = parent of node at (n-1)th index.
//or, Last non-leaf node = Node at index ((n-1) – 1)/2 = (n/2) – 1.
//RECURSIVE TC=O(N) SC=O(N)
public class BuildHeap {

	// To heapify a subtree rooted with node i which is
	// an index in arr[].Nn is size of heap
	static void heapify(int arr[], int N, int i)
	{
		int largest = i; // Initialize largest as root
		int l = 2 * i + 1; // left = 2*i + 1
		int r = 2 * i + 2; // right = 2*i + 2

		// If left child is larger than root
		if (l < N && arr[l] > arr[largest])
			largest = l;

		// If right child is larger than largest so far
		if (r < N && arr[r] > arr[largest])
			largest = r;

		// If largest is not root
		if (largest != i) {
			int swap = arr[i];
			arr[i] = arr[largest];
			arr[largest] = swap;

			// Recursively heapify the affected sub-tree
			heapify(arr, N, largest);
		}
	}

	// Function to build a Max-Heap from the Array
	static void buildHeap(int arr[], int N)
	{
		// Index of last non-leaf node
		int startIdx = (N / 2) - 1;

		// Perform reverse level order traversal
		// from last non-leaf node and heapify
		// each node
		for (int i = startIdx; i >= 0; i--) {
			heapify(arr, N, i);
		}
	}

	static void printHeap(int arr[], int N)
	{
		for (int i = 0; i < N; ++i)
			System.out.print(arr[i] + " ");

		System.out.println();
	}

	public static void main(String args[])
	{

		int arr[] = {1, 3, 5, 4, 6, 13, 10, 9, 8, 15, 17};
		int N = arr.length;
		buildHeap(arr, N);
		printHeap(arr, N);
	}
}

//ITERATIVE TC=O(N) SC=O(1)
public class BuildHeap {

	// To heapify a subtree rooted with node i which is
	// an index in arr[].Nn is size of heap
	static void heapify(int arr[], int N, int i)
	{
                while(i<N)
                {
		int largest = i; // Initialize largest as root
		int l = 2 * i + 1; // left = 2*i + 1
		int r = 2 * i + 2; // right = 2*i + 2

		// If left child is larger than root
		if (l < N && arr[l] > arr[largest])
			largest = l;

		// If right child is larger than largest so far
		if (r < N && arr[r] > arr[largest])
			largest = r;

		// If largest is not root
		if (largest != i) {
			int swap = arr[i];
			arr[i] = arr[largest];
			arr[largest] = swap;

			i=largest;
		}
                 else
                 {
                     break;
                 }
                }
	}

	// Function to build a Max-Heap from the Array
	static void buildHeap(int arr[], int N)
	{
		// Index of last non-leaf node
		int startIdx = (N / 2) - 1;

		// Perform reverse level order traversal
		// from last non-leaf node and heapify
		// each node
		for (int i = startIdx; i >= 0; i--) {
			heapify(arr, N, i);
		}
	}

	static void printHeap(int arr[], int N)
	{
		for (int i = 0; i < N; ++i)
			System.out.print(arr[i] + " ");

		System.out.println();
	}

	public static void main(String args[])
	{

		int arr[] = {1, 3, 5, 4, 6, 13, 10, 9, 8, 15, 17};
		int N = arr.length;
		buildHeap(arr, N);
		printHeap(arr, N);
	}
}