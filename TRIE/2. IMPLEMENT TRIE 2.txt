//IMPLEMENT TRIE 2 CNTWORDSEQUALTO AND CNTWORDSSTARTINGWITH
//TC=O(N*M) 
class Node
{
    Node links[]=new Node[26];
    int cntWordsStartWith=0;
    int cntWordsEqualTo=0;
    Node()
    {
   
    }
    public void put(char ch,Node node)
    {
        links[ch-'a']=node;
    }
    public Node get(char ch)
    {
        return links[ch-'a'];
    }
    public boolean containsKey(char ch)
    {
        return links[ch-'a']!=null;
    }
    public void increaseEnd()
    {
        cntWordsEqualTo++;
    }
    public void decreaseEnd()
    {
        cntWordsEqualTo--;
    }
    public void increasePrefix()
    {
        cntWordsStartWith++;
    }
     public void decreasePrefix()
    {
        cntWordsStartWith--;
    }
}
public class Trie { 
    Node root;
    public Trie() {
        // Write your code here.
        root=new Node();
    }

    public void insert(String word) {
        // Write your code here.
        Node node=root;
        for(int i=0;i<word.length();i++)
        {
            char ch=word.charAt(i);
            if(node.containsKey(ch)==false)
            {
                node.put(ch,new Node());
            }
            node=node.get(ch);
            node.increasePrefix();
        }
        node.increaseEnd();
    }

    public int countWordsEqualTo(String word) {
        // Write your code here.
        Node node=root;
        for(int i=0;i<word.length();i++)
        {
            char ch=word.charAt(i);
            if(node.containsKey(ch))
            {
                node=node.get(ch);
            }
            else
            {
                return 0;
            }
           
        }
       return  node.cntWordsEqualTo;
    }

    public int countWordsStartingWith(String word) {
        // Write your code here.
         Node node=root;
        for(int i=0;i<word.length();i++)
        {
            char ch=word.charAt(i);
            if(node.containsKey(ch))
            {
                node=node.get(ch);
            }
            else
            {
                return 0;
            }
           
        }
       return  node.cntWordsStartWith;
        
    }

    public void erase(String word) {
        // Write your code here.
         Node node=root;
        for(int i=0;i<word.length();i++)
        {
            char ch=word.charAt(i);
            if(node.containsKey(ch))
            {
                node=node.get(ch);
                node.decreasePrefix();
            }
           
        }
       node.decreaseEnd() ;       
    }

}
