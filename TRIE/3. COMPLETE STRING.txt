//COMPLETE STRING
//TC=O(M*N)
class Node
{
    Node links[]=new Node[26];
    boolean flag=false;
    public void put(char ch, Node node)
    {
        links[ch-'a']=node;
    }
    public Node get(char ch)
    {
        return links[ch-'a'];
    }
    public boolean containsKey(char ch)
    {
        return links[ch-'a']!=null;
    }
    public boolean isEnd()
    {
        return flag==true;
    }
    public void setEnd()
    {
        flag=true;
    }
}
class Trie {
    Node root;
    public Trie() {
        root=new Node();
    }
    
    public void insert(String word) {
        Node node=root;
        for(int i=0;i<word.length();i++)
        {
            char ch=word.charAt(i);
            if(node.containsKey(ch)==false)
            {
                node.put(ch,new Node());
            }
            node=node.get(ch);
        }
        node.setEnd();
    }
    
    public boolean checkPrefix(String word) {
        Node node= root;
        boolean tmpFlag=true;
        for(int i=0;i<word.length();i++)
        {
            char ch=word.charAt(i);
            if(node.containsKey(ch)==false)
                return false;
            node=node.get(ch);
            tmpFlag=tmpFlag & node.isEnd();
        }
        return tmpFlag;
    }
}

class Solution {

  public static String completeString(int n, String[] a) {
    // Write your code here.
      Trie t=new Trie();
      for(int i=0;i<a.length;i++)
      {
          t.insert(a[i]);
      }
      String longest="";
      for(int i=0;i<a.length;i++)
      {
          if(t.checkPrefix(a[i]))
          {
              if(a[i].length()>longest.length() ||(a[i].length()==longest.length() && a[i].compareTo(longest)<0))
                  longest=a[i];
                  
          }
      }
      if(longest=="")
          return "None";
      else
          return longest;
  }
}