//FIND ALL UNIQUE SUBSETS THAT SUM UPTO TARGET 
//TC=O(2^N) SC=O(NO OF UNIQUE SUBSETS)

class Solution {
    public void fun(int i,int[]nums,int target,List<List<Integer>> ans,  ArrayList<Integer> ds)
    {   
  
        if(target==0)
        {
            ans.add(new ArrayList<Integer>(ds));
           
        }
      for(int index=i;index<nums.length;index++)
      {
          if(index!=i && nums[index]==nums[index-1])
          {
              continue;
          }
          if(nums[index]<=target)
     {
        ds.add(nums[index]);
        fun(index+1,nums,target-nums[index],ans,ds);
        ds.remove(ds.size()-1);
     }
       
      }
     
    }
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> ans=new ArrayList<>();
        ArrayList<Integer> ds=new ArrayList<>();
        fun(0,candidates,target,ans,ds);
        return ans;
    }
}