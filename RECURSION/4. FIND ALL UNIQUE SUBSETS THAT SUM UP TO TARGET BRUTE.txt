//FIND ALL UNIQUE SUBSETS THAT SUM UP TO TARGET
//TC=SC=O(2^N)
class Solution {
    public void fun(int i,int[]nums,int target,HashSet<List<Integer>> ans,  ArrayList<Integer> ds)
    {   if(i==nums.length)
    {
        if(target==0)
        {
            List<Integer> l=new ArrayList<>(ds);
            Collections.sort(l);
            ans.add(l);
        }
        return;
    }
     if(nums[i]<=target)
     {
        ds.add(nums[i]);
        fun(i,nums,target-nums[i],ans,ds);
        ds.remove(ds.size()-1);
     }
       fun(i+1,nums,target,ans,ds);
    }
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        HashSet<List<Integer>> ans=new HashSet<>();
        ArrayList<Integer> ds=new ArrayList<>();
        fun(0,candidates,target,ans,ds);
        List<List<Integer>> p=new ArrayList<>(ans);
        return p;
    }
}