//ADJACENCY LIST REPRESENTATION OF A GRAPH
//sc=O(N+E)FOR DIRECTED GRAPH 
//SC=O(N+2*E) FOR UNDIRECTED GRAPH
//USING ARRAYLIST<ARRAYLIST<Integer>>
class Graph
{
	int vertex;
	List<List<Integer>> adj;
	Graph(int vertex)
	{
		this.vertex=vertex;
		adj=new ArrayList<>(vertex);
		for(int i=0;i<vertex;i++)
		{
        		adj.add(new ArrayList<>());
		}
	}
	public void addEdge(int src, int dest)
	{
		adj.get(src).add(dest);
		adj.get(dest).add(src);
	}
	public void print()
	{
		for(int i=0;i<adj.size();i++)
		{
			System.out.print("Vertex "+i+" is connected to-----> ");
			for(int j=0;j<adj.get(i).size();j++)
			{
				System.out.print(adj.get(i).get(j)+" ");
			}
			System.out.println();
		}

	}

}

public class Solution
{
	public static void main(String[] args)
	{
		Graph g=new Graph(5);
    		g.addEdge(0,1);
    		g.addEdge(0,4);
    		g.addEdge(1,2);
    		g.addEdge(3,4);
    		g.print();
	}
}


//USING ARRAYLIST ARRAY

class Graph
{
	int vertex;
	List<Integer> adj[];
	Graph(int vertex)
	{
		this.vertex=vertex;
		adj=new ArrayList[vertex];
		for(int i=0;i<vertex;i++)
        	{
			adj[i]=new ArrayList<>();
		}
	}
	public void addEdge(int src, int dest)
	{
		adj[src].add(dest);
		adj[dest].add(src);
	}
	public void print()
	{
		for(int i=0;i<adj.length;i++)
		{
			System.out.print("Vertex "+i+" is connected to-----> ");
			for(int j=0;j<adj[i].size();j++)
			{
				System.out.print(adj[i].get(j)+" ");
			}
			System.out.println();
		}

	}

}

public class Solution
{
	public static void main(String[] args)
	{
		Graph g=new Graph(5);
    		g.addEdge(0,1);
    		g.addEdge(0,4);
    		g.addEdge(1,2);
    		g.addEdge(3,4);
    		g.print();
	}
}