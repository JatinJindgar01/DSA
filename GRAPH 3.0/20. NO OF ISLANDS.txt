//NO OF ISLANDS

//TC=O(M*N) SC=O(M*N)

class Solution {
    public void dfs(int i, int j, char[][] grid, boolean[][] visited)
    {
        visited[i][j]=true;
        if(i-1>=0 && visited[i-1][j]==false && grid[i-1][j]=='1')
        {
            dfs(i-1,j,grid,visited);
        }
        if(i+1<grid.length && visited[i+1][j]==false && grid[i+1][j]=='1')
        {
            dfs(i+1,j,grid,visited);
        }
        if(j-1>=0 && visited[i][j-1]==false && grid[i][j-1]=='1')
        {
            dfs(i,j-1,grid,visited);
        }
        if(j+1<grid[0].length && visited[i][j+1]==false && grid[i][j+1]=='1')
        {
            dfs(i,j+1,grid,visited);
        }
    }
    public int numIslands(char[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        boolean visited[][]=new boolean[m][n];
        int count=0;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]=='1' && visited[i][j]==false)
                {
                    count++;
                    dfs(i,j,grid,visited);
                }
            }
        }
        return count;
    }
}

//TC=O(M*N) SC=O(M*N)
class Solution {
    public void dfs(int i, int j, char[][] grid, boolean[][] visited, int ni[], int nj[])
    {
        visited[i][j]=true;
        for(int k=0;k<4;k++)
        {
            int nextRow=i+ni[k];
            int nextCol=j+nj[k];
            if(nextRow>=0 && nextRow<grid.length && nextCol>=0 && nextCol<grid[0].length && visited[nextRow][nextCol]==false && grid[nextRow][nextCol]=='1')
            {
                 dfs(nextRow,nextCol,grid,visited,ni,nj);
            }
        }
       
    }
    public int numIslands(char[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        boolean visited[][]=new boolean[m][n];
        int count=0;
        int ni[]={-1,1,0,0};
        int nj[]={0,0,-1,1};
       
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]=='1' && visited[i][j]==false)
                {
                    count++;
                    dfs(i,j,grid,visited,ni,nj);
                }
            }
        }
        return count;
    }
}



//TC=O(M*N) SC=O(1)
class Solution {
    public void dfs(int i, int j, char[][] grid, int ni[], int nj[])
    {
        grid[i][j]='0';
        for(int k=0;k<4;k++)
        {
            int nextRow=i+ni[k];
            int nextCol=j+nj[k];
            if(nextRow>=0 && nextRow<grid.length && nextCol>=0 && nextCol<grid[0].length && grid[nextRow][nextCol]=='1')
            {
                 dfs(nextRow,nextCol,grid,ni,nj);
            }
        }
       
    }
    public int numIslands(char[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        int count=0;
        int ni[]={-1,1,0,0};
        int nj[]={0,0,-1,1};
       
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]=='1')
                {
                    count++;
                    dfs(i,j,grid,ni,nj);
                }
            }
        }
        return count;
    }
}