//PRIM ALGORITHM , UNDIRECTED, WEIGHTED, CYCLES
//TC=O(n+E)LOGN SC=O(n)

class Pair implements Comparable<Pair>
{
    int node;
    int weight;
    Pair(int node, int weight)
    {
        this.node=node;
        this.weight=weight;
    }
    public int compareTo(Pair other)
    {
        return this.weight-other.weight;
    }
}
class Solution
{
    //Function to find sum of weights of edges of the Minimum Spanning Tree.
    
    static int spanningTree(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj) 
    {
        // Add your code here
        int dist[]=new int[V];
        boolean visited[]=new boolean[V];
        int par[]=new int[V];
        for(int i=0;i<V;i++)
            par[i]=-1;
        for(int i=0;i<V;i++)
            dist[i]=Integer.MAX_VALUE;
        dist[0]=0;
        PriorityQueue<Pair> pq=new PriorityQueue<>();
        pq.add(new Pair(0,0));
        
        while(pq.isEmpty()==false)
        {
            Pair curr=pq.poll();
            visited[curr.node]=true;
            for(int i=0;i<adj.get(curr.node).size();i++)
            {
                ArrayList<Integer> child=adj.get(curr.node).get(i);
                if(visited[child.get(0)]==false && child.get(1)<dist[child.get(0)])
                   {
                    dist[child.get(0)]=child.get(1);
                    par[child.get(0)]=curr.node;
                    pq.add(new Pair(child.get(0),dist[child.get(0)]));
                   }
            }
        }
        int ans=0;
        for(int i=0;i<V;i++)
        {
         ans+=dist[i];   
        }
        return ans;
    }
}
