//CYCLE DETECTION IN AN UNDIRECTED GRAPH USING DFS
//TC=O(N+E) SC=O(N)+O(N)

class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int i, ArrayList<ArrayList<Integer>> adj, boolean visited[], int par)
    {
        visited[i]=true;
        for(int j=0;j<adj.get(i).size();j++)
        {
            int child=adj.get(i).get(j);
            if(visited[child]==false)
            {
                if(isCycle(child,adj,visited,i)==true) //NO NEED TO CHECK FOR REMAINING NODES IF A TRUE HAS COME
                    return true;
            }
            else
            {
                if(child!=par)    //NODE IS ALREADY VISITED AND IT IS NOT MY PARENT: BASIC CONDITION FOR CYCLE DETECTION
                    return true;
            }
        }
        return false;
    }
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean visited[]=new boolean[V];
        for(int i=0;i<V;i++)
        {
            if(visited[i]==false)
            {
                if(isCycle(i,adj,visited,-1)==true)  //NO NEED TO CHECK FOR REMAINING NODES IF A TRUE HAS COME
                    return true;
            }
        }
        return false;
    }
}
