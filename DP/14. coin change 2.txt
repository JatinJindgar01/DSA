//coin change 2

class Solution {
    public static int fun(int ind, int arr[], int target)
    {
        if(ind<0)
        {
            if(target==0)
                return 1;
            else
              return 0;
        }
          
          int nonTake=fun(ind-1,arr,target);
          int take=0;
          if(arr[ind]<=target)
            take=fun(ind,arr,target-arr[ind]);
           return take+nonTake;
        
    }
    public int change(int amount, int[] coins) {
        int N=coins.length;
       
        return fun(N-1,coins,amount);
        
    }
}

class Solution {
    public static int fun(int ind, int arr[], int target,int dp[][])
    {
        if(ind<0)
        {
            if(target==0)
                return 1;
            else
              return 0;
        }
          if(dp[ind][target]!=-1)
          return dp[ind][target];
          int nonTake=fun(ind-1,arr,target,dp);
          int take=0;
          if(arr[ind]<=target)
            take=fun(ind,arr,target-arr[ind],dp);
           return dp[ind][target]=take+nonTake;
        
    }
    public int change(int amount, int[] coins) {
        int N=coins.length;
        int dp[][]=new int[N][amount+1];
        for(int i=0;i<dp.length;i++)
        {
            Arrays.fill(dp[i],-1);
        }
        return fun(N-1,coins,amount,dp);
        
    }
}

class Solution {
 
    public int change(int sum, int[] nums) {
        int N=nums.length;
       
        int dp[][]=new int[N+1][sum+1];
        for(int ind=0;ind<=N;ind++)
        {
            for(int target=0;target<=sum;target++)
            {
                 if(ind==0)
                {
                    if(target==0)
                    dp[ind][target]=1;
                    else
                    dp[ind][target]=0;
                }
                else
                {
                    int nonTake=dp[ind-1][target];
                    int take=0;
                    if(nums[ind-1]<=target)
                        take=dp[ind][target-nums[ind-1]];
                     dp[ind][target]=take+nonTake;
                }
                
            }
        }
        return dp[N][sum];
        
    }
}


class Solution {
 
    public int change(int sum, int[] nums) {
        int N=nums.length;
       
        int prev[]=new int[sum+1];
        for(int ind=0;ind<=N;ind++)
        {
            int curr[]=new int[sum+1];
            for(int target=0;target<=sum;target++)
            {
               if(ind==0)
                {
                    if(target==0)
                    curr[target]=1;
                    else
                    curr[target]=0;
                }
                else
                {
                    int nonTake=prev[target];
                    int take=0;
                    if(nums[ind-1]<=target)
                        take=curr[target-nums[ind-1]];
                     curr[target]=take+nonTake;
                }
                
            }
            prev=curr;
        }
        return prev[sum];
        
    }
}


