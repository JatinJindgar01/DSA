//FROG JUMP, MINIMUM ENERGY LOSS
//FROG IS INITIALLY AT 1ST STAR, NOT AT 0 STAIR

//RECURSION
//TC=EXPONENTIAL

public class Solution {
    public static int frogJumpUtil(int n, int heights[])
    {
                if(n==0)
            return 0;
        int oneJump=frogJumpUtil(n-1,heights)+Math.abs(heights[n]-heights[n-1]);
        int twoJump=Integer.MAX_VALUE;
        if(n>1)
            twoJump=frogJumpUtil(n-2,heights)+Math.abs(heights[n]-heights[n-2]);
        return Math.min(oneJump,twoJump);
    }
    public static int frogJump(int n, int heights[]) {

        return frogJumpUtil(n-1,heights);            
    }

}

//MEMORIZATION TC=O(N) SC=O(N)+O(N)

import java.util.*;
public class Solution {
    public static int frogJumpUtil(int n, int heights[],int dp[])
    {      
        if(dp[n]!=-1)
            return dp[n];
                if(n==0)
            return dp[n]=0;
        int oneJump=frogJumpUtil(n-1,heights,dp)+Math.abs(heights[n]-heights[n-1]);
        int twoJump=Integer.MAX_VALUE;
        if(n>1)
            twoJump=frogJumpUtil(n-2,heights,dp)+Math.abs(heights[n]-heights[n-2]);
        return dp[n]=Math.min(oneJump,twoJump);
    }
    public static int frogJump(int n, int heights[]) {

        // Write your code here..
        int dp[]=new int[n];
        Arrays.fill(dp,-1);
        frogJumpUtil(n-1,heights,dp);
        return dp[n-1];
            
            
    }

}

//BOTTOM-UP DP TC=O(N) SC=O(N)
public static int frogJump(int n, int heights[]) {

        // Write your code here..
        int dp[]=new int[n];
        dp[0]=0;
        for(int i=1;i<n;i++)
        {
            int oneJump=dp[i-1]+Math.abs(heights[i]-heights[i-1]);
        int twoJump=Integer.MAX_VALUE;
        if(i>1)
            twoJump=dp[i-2]+Math.abs(heights[i]-heights[i-2]);
        dp[i]=Math.min(oneJump,twoJump);
        }
        return dp[n-1];      
    }

//SPACE OPTIMIZATION TC=O(N) SC=O(1)
 public static int frogJump(int n, int heights[]) {

        // Write your code here..
        int previous=0;
        int elementBeforePrevious=-1;
        for(int i=1;i<n;i++)
        {
            int oneJump=previous+Math.abs(heights[i]-heights[i-1]);
        int twoJump=Integer.MAX_VALUE;
        if(i>1)
            twoJump=elementBeforePrevious+Math.abs(heights[i]-heights[i-2]);
        int curr=Math.min(oneJump,twoJump);
            elementBeforePrevious=previous;
            previous=curr;
        }
        return previous;      
    }