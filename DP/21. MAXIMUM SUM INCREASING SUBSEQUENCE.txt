//MAXIMUM SUM INCREASING SUBSEQUENCE
//SAME AS LIS

//TC=O(2^N) SC=(N)
class Solution
{
    public int aux(int ind, int prev, int arr[])
    {
        if(ind==arr.length)
            return 0;
        int nonTake=aux(ind+1,prev,arr);
        int take=Integer.MIN_VALUE;
        if(prev==-1 || arr[ind]>arr[prev])
            take=arr[ind]+aux(ind+1,ind,arr);
        return Math.max(take,nonTake);
    }
	public int maxSumIS(int arr[], int n)  
	{  
	    //code here.
	    return aux(0,-1,arr);
	}  
}

//MEMORIZATION
//TC=O(N*N) SC=O(N*N) +O(N)
class Solution
{
    public int aux(int ind, int prev, int arr[],int dp[][])
    {
        if(ind==arr.length)
            return 0;
        if(dp[ind][prev+1]!=-1)
            return dp[ind][prev+1];
        int nonTake=aux(ind+1,prev,arr,dp);
        int take=Integer.MIN_VALUE;
        if(prev==-1 || arr[ind]>arr[prev])
            take=arr[ind]+aux(ind+1,ind,arr,dp);
        return dp[ind][prev+1]=Math.max(take,nonTake);
    }
	public int maxSumIS(int arr[], int n)  
	{  
	    //code here.
	    int dp[][]=new int[n][n];
	    for(int i=0;i<n;i++)
	        Arrays.fill(dp[i],-1);
	    return aux(0,-1,arr,dp);
	}  
}



//TABULATION
//TC=O(N*N) SC=O(N*N)
	public int maxSumIS(int arr[], int n)  
	{  
	    //code here.
	    //ind lies from 0,1,2,........n
	    //prev lies from -1,0,1,2,.......n-1
	    int dp[][]=new int[n+1][n+1];
	    for(int ind=n;ind>=0;ind--)
	    {
	        for(int prev=n-1;prev>=-1;prev--)
	        {
	            if(ind==n)
	                dp[ind][prev+1]=0;
	            else
	            {
                int nonTake=dp[ind+1][prev+1];
                int take=Integer.MIN_VALUE;
                if(prev==-1 || arr[ind]>arr[prev])
                    take=arr[ind]+dp[ind+1][ind+1];
                dp[ind][prev+1]=Math.max(take,nonTake);
	            }
	        }
	    }
	    return dp[0][0];
	}  



//SPACE OPTIMIZATION
//TC=O(N*N) SC=O(N)
public int maxSumIS(int arr[], int n)  
	{  
	    //code here.
	    //ind lies from 0,1,2,........n
	    //prev lies from -1,0,1,2,.......n-1
	    int previous[]=new int[n+1];
	    
	    for(int ind=n;ind>=0;ind--)
	    {
	        int curr[]=new int[n+1];
	        for(int prev=n-1;prev>=-1;prev--)
	        {
	            if(ind==n)
	                curr[prev+1]=0;
	            else
	            {
                int nonTake=previous[prev+1];
                int take=Integer.MIN_VALUE;
                if(prev==-1 || arr[ind]>arr[prev])
                    take=arr[ind]+previous[ind+1];
                curr[prev+1]=Math.max(take,nonTake);
	            }
	        }
	        previous=curr;
	    }
	    return previous[0];
	}  