//EDIT DISTANCE

//RECURSION
//TC=3^(M+N) SC=O(M+N)
class Solution {
    public int fun(String s1, String s2, int ind1, int ind2)
    {
        if(ind1<0)
            return ind2+1; //S1 EXHAUSTED, ANS IS NO OF ELEMENTS IN S2, AS WE NEED TO INSERT ALL ELEMENTS OF S2 TO S1
        if(ind2<0)
            return ind1+1; //S2 EXHAUSTED, ANS IS NO OF ELEMENTS IN S1, AS WE NEED TO DELETE ALL THE ELEMENTS OF S1
        if(s1.charAt(ind1)==s2.charAt(ind2))
            return fun(s1,s2,ind1-1,ind2-1); // NO OPERATION, GO DIAGONAL
        else  //ORDER IS REPLACE, DELETE, INSERT
            return 1+Math.min(fun(s1,s2,ind1-1,ind2-1),Math.min(fun(s1,s2,ind1-1,ind2),fun(s1,s2,ind1,ind2-1)));
    }
    public int minDistance(String word1, String word2) {
        int m=word1.length();
        int n=word2.length();
        return fun(word1,word2,m-1,n-1);
    }
}

//MEMORIZATION
//TC=O(M*N) SC=O(M*N) +O(M+N)
class Solution {
    public int fun(String s1, String s2, int ind1, int ind2,int dp[][])
    {
        if(ind1<0)
            return ind2+1;
        if(ind2<0)
            return ind1+1;
        if(dp[ind1][ind2]!=-1)
            return dp[ind1][ind2];
        if(s1.charAt(ind1)==s2.charAt(ind2))
            return dp[ind1][ind2]=fun(s1,s2,ind1-1,ind2-1,dp);
        else
            return dp[ind1][ind2]=1+Math.min(fun(s1,s2,ind1-1,ind2-1,dp),Math.min(fun(s1,s2,ind1-1,ind2,dp),fun(s1,s2,ind1,ind2-1,dp)));
    }
    public int minDistance(String word1, String word2) {
        int m=word1.length();
        int n=word2.length();
        int dp[][]=new int[m][n];
        for(int i=0;i<dp.length;i++)
        {
            Arrays.fill(dp[i],-1);
        }
        return fun(word1,word2,m-1,n-1,dp);
    }
}


//TABULATION
//TC=O(M*N) SC=O(M*N)
//USES SHIFT
class Solution {
    
    public int minDistance(String word1, String word2) {
        int m=word1.length();
        int n=word2.length();
        int dp[][]=new int[m+1][n+1];
        for(int ind1=0s;ind1<=m;ind1++)
        {
            for(int ind2=0;ind2<=n;ind2++)
            {
                if(ind1==0)
                    dp[ind1][ind2]=ind2; // NOT IND2+1 AS 1 BASED INDEXING IS THERE
                else if(ind2==0)
                    dp[ind1][ind2]=ind1;  //NOT IND1+1 AS 1 BASED INDEXING IS THERE, NO OF ELEMENTS TO BE DELETED FROM S1 IS EQUAL INDEX OF S1
                else if(word1.charAt(ind1-1)==word2.charAt(ind2-1))
                    dp[ind1][ind2]=dp[ind1-1][ind2-1];
                else
                {
                    dp[ind1][ind2]=1+Math.min(dp[ind1-1][ind2-1],Math.min(dp[ind1-1][ind2],dp[ind1][ind2-1]));
                }
                
            }
        }
        return dp[m][n];
    }
}

//SPACE OPTIMATION
//TC=O(M*N) SC=O(M)
class Solution {
    
    public int minDistance(String word1, String word2) {
        int m=word1.length();
        int n=word2.length();
        int prev[]=new int[n+1];
       
        for(int ind1=0;ind1<=m;ind1++)
        {
             int curr[]=new int[n+1]; //NEVER DECLARE OUTSIDE ALONG WITH PREV, AS EVERY TIME A NEW CURR IS NEEDED
            for(int ind2=0;ind2<=n;ind2++)
            {
                if(ind1==0)
                    curr[ind2]=ind2;
                else if(ind2==0)
                    curr[ind2]=ind1;
                else if(word1.charAt(ind1-1)==word2.charAt(ind2-1))
                    curr[ind2]=prev[ind2-1];
                else
                {
                    curr[ind2]=1+Math.min(prev[ind2-1],Math.min(prev[ind2],curr[ind2-1]));
                }
                
            }
            prev=curr;
        }
        return prev[n];
    }
}