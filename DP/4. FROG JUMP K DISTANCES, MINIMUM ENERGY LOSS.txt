// FROG JUMP K DISTANCES, MINIMUM ENERGY LOSS
//RECURSION TC=EXPONENTIAL

import java.util.*;
static int solveUtil(int ind, int[] height,Nint k){
    if(ind==0) 
	return 0;
    int mmSteps = Integer.MAX_VALUE;
    for(int j=1;j<=k;j++){
        if(ind-j>=0){
       int jump = solveUtil(ind-j, height, k)+ Math.abs(height[ind]- 
       height[ind-j]);
            mmSteps= Math.min(jump, mmSteps);
        }
    }
    return mmSteps;
    
}

static int solve(int n, int[] height , int k){
    return solveUtil(n-1, height,k);
}


//MEMORIZATION TC=O(N*K) SC=O(N)+O(N)

import java.util.*;
static int solveUtil(int ind, int[] height, int[] dp, int k){
    if(dp[ind]!=-1) 
	return dp[ind];
    if(ind==0) 
	return 0;
    int mmSteps = Integer.MAX_VALUE;  
    for(int j=1;j<=k;j++){
        if(ind-j>=0){
       int jump = solveUtil(ind-j, height, dp, k)+ Math.abs(height[ind]- 
       height[ind-j]);
            mmSteps= Math.min(jump, mmSteps);
        }
    }
    return dp[ind]= mmSteps;
    
}

static int solve(int n, int[] height , int k){
    int dp[]=new int[n];
    Arrays.fill(dp,-1);
    return solveUtil(n-1, height, dp, k);
}


//BOTTOM-UP DP TC=O(N*K) SC=O(N)

static int solve(int n, int[] height , int k){
    int dp[]=new int[n];
    dp[0]=0;
    for(int i=1;i<n;i++){
        int mmSteps = Integer.MAX_VALUE;
        
        for(int j=1;j<=k;j++){
            if(i-j>=0){
                int jump = dp[i-j]+ Math.abs(height[i]- height[i-j]);
                mmSteps= Math.min(jump, mmSteps);
            }
        }
        dp[i]= mmSteps;
    }
    return dp[n-1];
}


//NO SPACE OPTIMIZATION CAN HAPPEN AS FOR EVERY INDEX WE REQUIRE PREVIOUS K ANSWERS
