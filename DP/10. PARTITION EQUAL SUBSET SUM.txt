//PARTITION EQUAL SUBSET SUM
//RECURSION
//TC=O(2^N) SC=O(N)
class Solution {
       public int fun(int ind, int arr[], int target)
    {
          if(ind<0)
          {
              if(target==0)
              return 1;
              else 
              return 0;
          }
          int nonTake=fun(ind-1,arr,target);
          int take=0;
          if(arr[ind]<=target)
            take=fun(ind-1,arr,target-arr[ind]);
           return ((take==1 || nonTake==1)?1:0);
        
    }
    public boolean canPartition(int[] nums) {
        int total=0;
        int N=nums.length-1;
        for(int i=0;i<nums.length;i++)
        {
            total+=nums[i];
        }
        if(total%2!=0)
            return false;
        int sum=total/2;
        return fun(N-1,nums,sum)==1;
        
    }
}

//MEMORIZATION
//TC=O(N*sum) SC=O(N*SUM)+ O(N)
class Solution {
       
   public  int fun(int ind, int arr[], int target,int dp[][])
    {
        if(ind<0)
	{
	   if(target==0)
          	return 1;
	   else
		return 0;
	}
          if(dp[ind][target]!=-1)
          return dp[ind][target];
          int nonTake=fun(ind-1,arr,target,dp);
          int take=0;
          if(arr[ind]<=target)
            take=fun(ind-1,arr,target-arr[ind],dp);
           return dp[ind][target]=((take==1 || nonTake==1)?1:0);
        
    }
    public boolean canPartition(int[] nums) {
        int total=0;
        int N=nums.length-1;
        for(int i=0;i<nums.length;i++)
        {
            total+=nums[i];
        }
        if(total%2!=0)
            return false;
        int sum=total/2;
        int dp[][]=new int[N][sum+1];
        for(int i=0;i<dp.length;i++)
        {
            Arrays.fill(dp[i],-1);
        }
        return fun(N-1,nums,sum,dp)==1;
        
    }
}

//TABULATION
//TC=O(N*sum) SC=O(N*SUM)
class Solution {
  
    public boolean canPartition(int[] nums) {
        int total=0;
        int N=nums.length-1;
        for(int i=0;i<nums.length;i++)
        {
            total+=nums[i];
        }
        if(total%2!=0)
            return false;
        int sum=total/2;
         int dp[][]=new int[N+1][sum+1];
        for(int ind=0;ind<=N;ind++)
        {
            for(int target=0;target<=sum;target++)
            {
                 if(ind==0)
                {
                    if(target==0)
                    dp[ind][target]=1;
                    else
                    dp[ind][target]=0;
                }
                else
                {
                    int nonTake=dp[ind-1][target];
                    int take=0;
                    if(nums[ind-1]<=target)
                        take=dp[ind-1][target-nums[ind-1]];
                     dp[ind][target]=((take==1 || nonTake==1)?1:0);
                }
                
            }
        }
        return dp[N][sum]==1;
    }
        
    }

//SPACE OPTIMIZATION
//TC=O(N*sum) SC=O(1)
class Solution {
  
    public boolean canPartition(int[] nums) {
        int total=0;
        int N=nums.length-1;
        for(int i=0;i<nums.length;i++)
        {
            total+=nums[i];
        }
        if(total%2!=0)
            return false;
        int sum=total/2;
         //-1,0,1,2,n-1
        //do a co-ordinate shift
        
        int prev[]=new int[sum+1];
        for(int ind=0;ind<=N;ind++)
        {
            int curr[]=new int[sum+1];
            for(int target=0;target<=sum;target++)
            {
               if(ind==0)
                {
                    if(target==0)
                    curr[target]=1;
                    else
                    curr[target]=0;
                }
                else
                {
                    int nonTake=prev[target];
                    int take=0;
                    if(nums[ind-1]<=target)
                        take=prev[target-nums[ind-1]];
                     curr[target]=((take==1 || nonTake==1)?1:0);
                }
                
            }
            prev=curr;
        }
        return prev[sum]==1;
    }
        
    }
