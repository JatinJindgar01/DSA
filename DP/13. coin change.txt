+//coin change
//TC=2^N SC=O(n)

class Solution {
     public static int fun(int ind, int arr[], int target)
    {
        if(ind<0)
        {
            if(target==0)
            {
                //if no coins left, we can't take any coin
                return 0;   
            }
              
            else  //if target is not achieves, return infinity as this is our base value as min is to be found
              return (int)1e9;
        }
          
          int nonTake=fun(ind-1,arr,target);
          int take=Integer.MAX_VALUE;
          if(arr[ind]<=target)
            take=1+fun(ind,arr,target-arr[ind]);
           return Math.min(nonTake,take);
        
    }
    public int coinChange(int[] arr,int sum) {
        int N=arr.length;
        int x=fun(N-1,arr,sum);
        if(x>=(int)1e9)
            return -1;
        else 
            return x;
}
}

class Solution {
     public static int fun(int ind, int arr[], int target,int dp[][])
    {
        if(ind<0)
        {
            if(target==0)
            {
                //if no coins left, we can't take any coin
                return 0;   
            }
              
            else //if target is not achieves, return infinity as this is our base value as min is to be found
              return (int)1e9;
        }
          if(dp[ind][target]!=-1)
          return dp[ind][target];
          int nonTake=fun(ind-1,arr,target,dp);
          int take=Integer.MAX_VALUE;
          if(arr[ind]<=target)
            take=1+fun(ind,arr,target-arr[ind],dp);
           return dp[ind][target]=Math.min(nonTake,take);
        
    }
    public int coinChange(int[] coins, int amount) {
        int N=coins.length;
        int dp[][]=new int[N][amount+1];
        for(int i=0;i<dp.length;i++)
        {
            Arrays.fill(dp[i],-1);
        }
        int ans=fun(N-1,coins,amount,dp);
        if(ans>=(int)1e9)
            return -1;
        else
            return ans;
    }
}

class Solution {
     
    public int coinChange(int[] arr,int sum) {
        int N=arr.length;
       
        int dp[][]=new int[N+1][sum+1];
        for(int ind=0;ind<=N;ind++)
        {
            
            for(int target=0;target<=sum;target++)
            {
                if(ind==0)
                {
                    if(target==0)
                        dp[ind][target]=0;
                    else
                        dp[ind][target]=(int)1e9;
                }
                
                else
                {
                    int nonTake=dp[ind-1][target];
                    int take=Integer.MAX_VALUE;
                    if(arr[ind-1]<=target)
                       take=1+dp[ind][target-arr[ind-1]];
                    dp[ind][target]=Math.min(take,nonTake);
                }
                
            }
            
        }
        return ((dp[N][sum]>=(int)1e9)?-1:dp[N][sum]);
    }
}

public int coinChange(int[] arr,int sum) {
        int N=arr.length;
        int prev[]=new int[sum+1];
        for(int ind=0;ind<=N;ind++)
        {
            int curr[]=new int[sum+1];
            for(int target=0;target<=sum;target++)
            {
                if(ind==0)
                {
                    if(target==0)
                        curr[target]=0;
                    else
                        curr[target]=(int)1e9;
                }
                
                else
                {
                    int nonTake=prev[target];
                    int take=Integer.MAX_VALUE;
                    if(arr[ind-1]<=target)
                       take=1+curr[target-arr[ind-1]];
                    curr[target]=Math.min(take,nonTake);
                }
                
            }
            prev=curr;
        }
        return ((prev[sum]>=(int)1e9)?-1:prev[sum]);
    }