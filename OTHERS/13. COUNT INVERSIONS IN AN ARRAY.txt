// COUNT INVERSIONS IN AN ARRAY
//TC=O(NLOGN) SC=O(N)

import java.util.* ;
import java.io.*; 
public class Solution {
    public static int getInversions(int arr[], int n) {
        // Write your code here.
		return mergeSort(arr,0,n-1);
    }
	
static int merge(int arr[], int l, int m, int r)
    {
         // Your code here
         int ls=m-l+1;
         int rs=r-m;
         int left[]=new int[ls];
         int right[]=new int[rs];
         int k=l;
         for(int i=0;i<ls;i++)
         {
             left[i]=arr[k];
             k++;
         }
         for(int i=0;i<rs;i++)
         {
             right[i]=arr[k];
             k++;
         }
         int i=0;
         int j=0;
         int h=l;
	    int swaps=0;
         while(i<ls && j<rs)
         {
             if(left[i]<=right[j])
             {
                arr[h]=left[i];
                i++;
                h++;
             }
             else
             {
				 swaps=swaps+(m-(l+i)+1);
                 arr[h]=right[j];
                 j++;
                 h++;
             }
         }
         while(i<ls)
         {
             arr[h]=left[i];
             i++;
             h++;
         }
         while(j<rs)
         {
             arr[h]=right[j];
             j++;
             h++;
         }
	return swaps;
         
    }
    static int mergeSort(int arr[], int l, int r)
    {
        //code here
		int count=0;
        if(l<r)
        {
        int m=(l+r)/2;
        count=count+mergeSort(arr,l,m);
        count=count+mergeSort(arr,m+1,r);
        count=count+merge(arr,l,m,r);
        }
		return count;
    }
}