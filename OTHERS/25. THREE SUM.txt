//3 SUM PROBLEM
//ALL UNIQUE TRIPLETS
//TC=O(N*N) SC=O(N)
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        HashMap<Integer,Integer> h=new HashMap<>();
        HashSet<List<Integer>> hset=new HashSet<>();
        List<List<Integer>> ans=new ArrayList<>();
        for(int i=0;i<nums.length-1;i++)
        {
            for(int j=i+1;j<nums.length;j++)
            {
                int remaining=0-nums[i]-nums[j];
                if(h.containsKey(remaining) )
                {
                    List<Integer> tmp=new ArrayList<>();
                    tmp.add(nums[i]);
                    tmp.add(nums[j]);
                    tmp.add(remaining);
                    Collections.sort(tmp);
                    hset.add(tmp);
                }
            }
             h.put(nums[i],i);
        }
        Iterator it=hset.iterator();
        while(it.hasNext())
        {
            List<Integer> p=(List<Integer>)it.next();
            ans.add(p);
        }
        return ans;
    }
}

//sorting and 2pointer
//TC=O(N*N) SC=O(1)
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
       Arrays.sort(nums);
        List<List<Integer>> ans =new ArrayList<>();
        int n=nums.length;
        for(int i=0;i<n;i++)
        {
            if(i==0 || nums[i]!=nums[i-1])
            {
                int j=i+1;
                int k=n-1;
                while(j<k)
                {
                    if(nums[i]+nums[j]+nums[k]==0)
                    {
                        ArrayList<Integer> arr=new ArrayList<>();
                        arr.add(nums[i]);
                        arr.add(nums[j]);
                        arr.add(nums[k]);
                        ans.add(arr);
                        j++;
                        k--;
                        while(j<k && nums[j]==nums[j-1])
                            j++;
                        while(j<k && nums[k]==nums[k+1])
                            k--;
                        
                    }
                    else if(nums[i]+nums[j]+nums[k]<0)
                    {
                        j++;
                    }
                    else
                    {
                        k--;
                    }
                }
            }
            
            
        }
        return ans;
    }
}




