//COUNT NO OF SUBARRAYS WITH GIVEN SUM
//BRUTE FOTCE TC=O(N*N) SC=O(1)
public class Solution {
    public int solve(int[] A, int s) {
        int count=0;
        int n=A.length;
        for(int i=0;i<n;i++)
        {
            int sum=0;
            for(int j=i;j<n;j++)
            {
                sum=sum+A[j];
                if(sum==target)
                count++;
            }
        }
        return count;
    }
}

//BETTER HASHMAP
//TC=O(N) SC=O(N)

public class Solution {
    public int solve(int[] A, int target) {
        int n=A.length;
        int count=0;
        HashMap<Integer,Integer> h=new HashMap<>();
        h.put(0,1);
        int sum=0;
        for(int i=0;i<n;i++)
        {
            sum=sum+A[i];
            if(h.containsKey(sum-target))
            {
                count=count+h.get(sum-target);
            }
            h.put(sum,h.getOrDefault(sum,0)+1);
            
        }
        return count;
    }
}

//Constant space only positve no
//TC=O(N) SC=O(1)

public class Solution {
    public int solve(int[] A, int target) {
        int n=A.length;
        int start=0;
        int count=0;
        int sum=0;
        for(int i=0;i,n;i)
        {
            sum=sum+A[i];
            while(sum>target)
            {
                sum=sum-A[start];
                start++;
            }
            if(sum==target)
            count++;
        }
	return count;
    }
    
}


//optimal negative also works
//TC=O(N) SC=O(1)
public class Solution {
    public int solve(int[] A, int target) {
        int n=A.length;
        int start=0;
        int count=0;
        int sum=0;
        int min=Integer.MAX_VALUE;
        for(int i=0;i<n;i++)
        {
            min=Math.min(min,A[i]);
        }
        int ele=Math.abs(min);
        for(int i=0;i<n;i++)
        {
            A[i]=A[i]+min;
        }
        for(int i=0;i<n;i++)
        {
            sum=sum+A[i];
            target+=ele;
            while(sum>target)
            {
                sum=sum-A[start];
                start++;
                target-=ele;
            }
            if(sum==target)
            count++;
        }
    }
    return count;
}