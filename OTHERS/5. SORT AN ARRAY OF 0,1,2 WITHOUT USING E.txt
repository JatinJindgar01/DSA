//SORT AN ARRAY OF 0,1,2 WITHOUT USING EXTRA SPACE

//DUTCH NATIONAL FLAG ALGORITHM
// TC=O(N) SC=O(1)

class Solution {
    public void sortColors(int[] nums) {
        // 4 areas 
        // 0's area 0 to j-1
        // 1's area j to i-1
        // unexplored area i to k
        // 2's area k+1 to end
        // 3 pointers i,j and k can divide an array into 4 areas
        //|----------------|--------------|------------|-------------|
        //0                j              i            k             end
        
        int n=nums.length;
        int i=0;
        int j=0;
        int k=n-1;
        while(i<=k)
        {
            if(nums[i]==0)
            {
                //swap nums[i] and nums[j] and increment j and i
                int temp=nums[i];
                nums[i]=nums[j];
                nums[j]=temp;
                j++;
                i++;
            }
            else if(nums[i]==1)
            {
                //increment i
                i++;
            }
            else
            {
                //swap nums[i] and nums[k] and decrement k
                int temp=nums[i];
                nums[i]=nums[k];
                nums[k]=temp;
                k--;
            }
        }
  
    }
}


//SORT AN ARRAY OF 0,1 WITHOUT USING EXTRA SPACE
// TC=O(N) SC=O(1)

class Solution {
    void segregate0and1(int[] arr, int n) {
        // code here
        //3 areas and 2 indices i, j
        //0 ka area = 0 to j-1
        // unexplored area =  i to end 
        //1 ka area = j to i-1
        //|--------------------|--------------------|---------------|
        //0                    j                    i              n-1
        int i=0;
        int j=0;
        while(i<n)
        {
            if(arr[i]==0)
            {
                //swap arr[i] and arr[j] and increment j and i
                int temp=arr[i];
                arr[i]=arr[j];
                arr[j]=temp;
                i++;
                j++;
            }
            else if(arr[i]==1)
            {
                i++;
            }
        
        }
    }

}