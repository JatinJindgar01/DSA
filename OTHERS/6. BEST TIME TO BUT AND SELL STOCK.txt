//BEST TIME TO BUT AND SELL STOCK (ONLY ONE TRANSACTION ALLOWED)


// For every day find the maximum profit that can be earned if stock is sold on that day.
// This can be done by finding least element before me
// track maximum of all these
//TC O(N)  SC=O(1)
class Solution {
    public int maxProfit(int[] prices) {
        int n=prices.length;
        int gm=Integer.MIN_VALUE;
        int least_value=Integer.MAX_VALUE;
       
        for(int i=0;i<n;i++)
        {
             int profit=0;
            if(prices[i]<least_value)
                least_value=prices[i];
            profit=prices[i]-least_value;
            gm=Math.max(gm,profit);
        }
        return gm;
    }
}



//BEST TIME TO BUT AND SELL STOCK (INFINITE TRANSACTION ALLOWED)
//TC O(N)  SC=O(1)

class Solution {
    public int maxProfit(int[] prices) {
        int buyDay=0;
        int sellDay=0;
        int profit=0;
        for(int i=1;i<prices.length;i++)
        {
            if(prices[i]>=prices[i-1])
            {
                sellDay++;
            }
            else
            {
                //book profit
                profit=profit+prices[sellDay]-prices[buyDay];
                buyDay=i;
                sellDay=i;
            }
        }
        //sell on last day
         profit=profit+prices[sellDay]-prices[buyDay];
        return profit;
    }
}

