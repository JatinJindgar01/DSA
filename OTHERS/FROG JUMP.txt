/*
FROG JUMP
STANDING AT 1ST STAIR, HAVE TO REACH THE NTH. EVERY Stair has height.
 we can jump one stair or 2 stairs at a time. the cost of jumping would be difference between heights
 as given in heights array. find the minimum cosst of reaching from 1st to nth stair.
*/
//BRUTE RECURSION

public class Solution {
	public static int aux(int n, int heights[])
	{
		if(n==0)
			return 0;
        if(n==1)
            return Math.abs(heights[0]-heights[1]);
		int left=aux(n-1,heights)+Math.abs(heights[n]-heights[n-1]);
		int right=aux(n-2,heights)+Math.abs(heights[n]-heights[n-2]);
		return Math.min(left,right);
	}
    public static int frogJump(int n, int heights[]) {

        // Write your code here..
		//In terms of index i have to reach n-1 stair
		return aux(n-1,heights);
    }

}

//BETTER MEMORIZATION
//TC=O(N)
//SC=O(N)+O(N)
public class Solution {
	public static int aux(int n, int heights[],int dp[])
	{
		if(n==0)
			return 0;
        if(n==1)
            return Math.abs(heights[0]-heights[1]);
		if(dp[n]!=-1)
			return dp[n];
		int left=aux(n-1,heights,dp)+Math.abs(heights[n]-heights[n-1]);
		int right=aux(n-2,heights,dp)+Math.abs(heights[n]-heights[n-2]);
		return dp[n]=Math.min(left,right);
	}
    public static int frogJump(int n, int heights[]) {

        // Write your code here..
		//In terms of index i have to reach n-1 stair
		int dp[]=new int[n];
		for(int i=0;i<n;i++)
			dp[i]=-1;
		return aux(n-1,heights,dp);
    }

}

//OPTIMAL TABULATION
//TC=O(N)
//SC=O(N)
public class Solution {

    public static int frogJump(int n, int heights[]) {

        // Write your code here..
		//In terms of index i have to reach n-1 stair
		if(n==0)
			return 0;
		if(n==1)
			return Math.abs(heights[0]-heights[1]);
		int dp[]=new int[n];
		dp[0]=0;
		dp[1]=Math.abs(heights[0]-heights[1]);
		for(int i=2;i<n;i++)
		{
			int left=dp[i-1]+Math.abs(heights[i]-heights[i-1]);
		    int right=dp[i-2]+Math.abs(heights[i]-heights[i-2]);
		    dp[i]=Math.min(left,right);
		}
		return dp[n-1];
    }

}

//best space optimized
//tc=o(n)  sc=o(1)

public class Solution {

    public static int frogJump(int n, int heights[]) {

        // Write your code here..
		//In terms of index i have to reach n-1 stair
		if(n==0)
			return 0;
		if(n==1)
			return Math.abs(heights[0]-heights[1]);
		int beforePrevious=0;
		int previous=Math.abs(heights[0]-heights[1]);
		for(int i=2;i<n;i++)
		{
			int left=previous+Math.abs(heights[i]-heights[i-1]);
		    int right=beforePrevious+Math.abs(heights[i]-heights[i-2]);
		    int curr=Math.min(left,right);
			beforePrevious=previous;
			previous=curr;
		}
		return previous;
    }

}