// SEARCH IN A 2D MATRIX(all the rows are sorted and the columns are sorted)
// TC=O(N+M) SC=O(1)
class Solution {
    public boolean searchMatrix(int[][] matrix, int x) {
        int n=matrix.length;
        int m=matrix[0].length;
        int i=0;
        int j=m-1;
        while(i<n && j>=0)
        {
            if(matrix[i][j]==x)
            return true;
            else if(matrix[i][j]<x)
            {
                //discard row
                i++;
            }
            else
            {
                //discard column
                j--;
            }
        }
        return false;
    }
}

// SEARCH IN A MATRIX(TOTALLY SORTED)
// TC=O(LOGM+LOGN) SC=O(1)
class Solution {
    public boolean searchMatrix(int[][] matrix, int x) {
        int n=matrix.length;
        int m=matrix[0].length;
        int low=0;
        int high=n-1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(matrix[mid][0]==x)
            return true;
            else if(x==matrix[mid][m-1])
            return true;
            else if(matrix[mid][0]>x)
            {
                high=mid-1;
            }
            else if(matrix[mid][0]<x && matrix[mid][m-1]>x)
            {
                //binary search ont this row
                int l=0;
                int h=m-1;
                while(l<=h)
                {
                    int local_mid=(l+h)/2;
                    if(matrix[mid][local_mid]==x)
                    return true;
                    else if(matrix[mid][local_mid]<x)
                    l=local_mid+1;
                    else
                    h=local_mid-1;
                }
                return false;
            }
            else
            {
                low=mid+1;
            }
        }
        return false;
    }
}


