//REVERSE PAIRS
//TC=O(NLOGN)
SC=O(N)
class Solution {
    int merge(int[] arr, int l, int m, int r)
    {
        int i=l;
        int j=m+1;
  
        ArrayList<Integer> tmp=new ArrayList<>();
        int swaps=0;
        while(i<=m && j<=r)
        {
            if(arr[i]>2*(long)arr[j])
            {
               swaps+=(m-i+1);
                j++;
            }
            else
            {
                i++;
            }
        }
         i=l;
        j=m+1;
        
        while(i<=m && j<=r)
        {
            if(arr[i]<=arr[j])
            {
                tmp.add(arr[i]);
          
                i++;
            }
            else
            {
                tmp.add(arr[j]);
                
                j++;
                
            }
        }
        
        while(i<=m)
            tmp.add(arr[i++]);
        while(j<=r)
            tmp.add(arr[j++]);
        int g=0;
        for(int p=l;p<=r;p++)
            arr[p]=tmp.get(g++);
        return swaps;
        
    }
     int mergeSort(int arr[], int l, int r)
    {
        int count=0;
        if(l<r)
        {
            int m=(l+r)/2;
            //System.out.println(l+" "+r);
            count+=mergeSort(arr,l,m);
            count+=mergeSort(arr,m+1,r);
            count+=merge(arr,l,m,r);
        }
        return count;
    }
   
    public int reversePairs(int[] nums) {
        int N=nums.length;
        return mergeSort(nums,0,N-1);
    }
}