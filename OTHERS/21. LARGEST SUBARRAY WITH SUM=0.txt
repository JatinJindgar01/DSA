// LARGEST SUBARRAY WITH SUM=0
//brute force tc=O(N*N) SC==O(1)
class GfG
{
    int maxLen(int arr[], int n)
    {
      int gm=0;
      for(int i=0;i<n;i++)
      {
          int sum=0;
          for(int j=i;j<n;j++)
          {
              sum=sum+arr[j];
              if(sum==0)
              gm=Math.max(gm,j-i+1);
          }
      }
      return gm;
    }
}

//optimal TC=O(N) SC=O(N)
class GfG
{
    int maxLen(int arr[], int n)
    {
        HashMap<Integer,Integer> h=new HashMap<>();
        h.put(0,-1);
        int sum=0;
        int gm=0;
        for(int i=0;i<n;i++)
        {
            sum=sum+arr[i];
            if(h.containsKey(sum))
            {
                gm=Math.max(gm,i-h.get(sum));
            }
            else
            {
                h.put(sum,i);
            }
        }
        return gm;
    }
    
}

//GENERAL CASE TARGET CAN BE ANYTHING

class GfG
{
    int maxLen(int arr[], int n, int target)
    {
        HashMap<Integer,Integer> h=new HashMap<>();
        h.put(0,-1);
        int sum=0;
        int gm=0;
        for(int i=0;i<n;i++)
        {
            sum=sum+arr[i];
            if(h.containsKey(sum-target))
            {
                gm=Math.max(gm,i-h.get(sum-target));
            }
            else
            {
                h.put(sum,i);
            }
        }
        return gm;
    }
    
}

