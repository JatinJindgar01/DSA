//MAJORITY ELEMENT N/3 IN AN ARRAY

// TC=O(N) SC=O(N)
class Solution {
    public List<Integer> majorityElement(int[] nums) {
        int n=nums.length;
        
        HashSet<Integer> k=new HashSet<>();
        HashMap<Integer,Integer> h=new HashMap<>();
        int desiredCount=(n/3);
        for(int i=0;i<n;i++)
        {
            h.put(nums[i],h.getOrDefault(nums[i],0)+1);
            if(h.get(nums[i])>desiredCount && k.contains(nums[i])==false)
            k.add(nums[i]);
        }
        ArrayList<Integer> l=new ArrayList<>(k);
        return l;
    }
}
//OPTIMAL TC=O(N) SC=O(1)
//MOORE VOTING ALGORITHM

class Solution {
    public List<Integer> majorityElement(int[] nums) {
    
        int count0=0;
        int count1=0;
        int ele0=-1;
        int ele1=-1;
        for(int i=0;i<nums.length;i++)
        {   
            if(nums[i]==ele0)
                count0++;
            else if(nums[i]==ele1)
                count1++;
            else if(count0==0)
                {
                    ele0=nums[i];
                    count0=1;
                }
                  else if(count1==0)
                {
                    ele1=nums[i];
                    count1=1;
                }
            else
            {
                count0--;
                count1--;
                
            }
            
        }
        int exp=nums.length/3;
        System.out.println(exp);
        int c1=0;
        int c2=0;
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]==ele0)
                c1++;
            else if(nums[i]==ele1)
                c2++;
        }
        ArrayList<Integer> l=new ArrayList<>();
        if(c1>exp)
            l.add(ele0);
         if(c2>exp)
            l.add(ele1);
        return l;
        
    }
}