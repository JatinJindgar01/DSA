// MAJORITY ELEMENT IN AN ARRAY(N/2)
// TC=O(N) SC=O(N)
class Solution {
    public int majorityElement(int[] nums) {
        int n=nums.length;
        HashMap<Integer,Integer> h=new HashMap<>();
        int desiredCount=(n/2);
        for(int i=0;i<n;i++)
        {
            h.put(nums[i],h.getOrDefault(nums[i],0)+1);
            if(h.get(nums[i])>desiredCount)
            return nums[i];
        }
        return -1;
    }
}

//OPTIMAL MOORE'S VOTING ALGORITHM
// TC=O(N) SC=O(1)
//  Increase
// Acquire
//Decrease
class Solution {
    public int majorityElement(int[] nums) {
        int n=nums.length;
        int ele=-1;
        int count=0;
        for(int i=0;i<n;i++)
        {
            if(nums[i]==ele)
            {
                count++;
            }
            else if(count==0)
            {
                ele=nums[i];
                count=1;
            }
            else 
            {
                count--;
            }
        }
        // NO MAJORITY ELEMENT IS PRESENT
        if(count<=0)
        return -1;
        //MAJORITY ELEMENT MAY BE PRESENT
        int cnt=0;
        int desiredCount =(n/2);
        for(int i=0;i<n;i++)
        {
            if(nums[i]==ele)
            cnt++;
            if(cnt>desiredCount)
            return ele;
        }
        return -1;
    }
}
