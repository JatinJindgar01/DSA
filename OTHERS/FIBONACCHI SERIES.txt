/*
GIVEN A NUMBER N, RETURN THE NTH FIBONACCI NUMBER
F(0)=0
F(1)=1
F(2)=2
F(3)=3
GENERAL FORMULA
F(N)=F(N-2)+F(N-1)
*/

//BRUTE FORCE: RECURSION

class Solution {
    public int fib(int n) {
        if(n<=1)
        return n;
        return fib(n-2)+fib(n-1);
    }
}

//BETTER: MEMORIZATION
//TC=O(N) SC=O(N)+O(N)(STACK SPACE +ARRAY)
class Solution {
    public int aux(int n, int dp[])
    {
        if(n<=1)
            return n;
        if(dp[n]!=-1)
            return dp[n];
        return dp[n]=fib(n-2)+fib(n-1);
    }
    public int fib(int n) {
        int dp[]=new int[n+1];
        for(int i=0;i<=n;i++)
            dp[i]=-1;
        return aux(n,dp);
    }
}

//OPTIMAL TABULATION
// TC=O(N) SC=O(N)
class Solution {
    public int fib(int n) {
        if(n<=1)
            return n;
        int dp[]=new int[n+1];
        dp[0]=0;
        dp[1]=1;
        for(int i=2;i<=n;i++)
            dp[i]=dp[i-2]+dp[i-1];
        return dp[n];
    }
}

// SPACE OPTIMIZATION
// TC=O(N) SC=O(1)
class Solution {
    public int fib(int n) {
        if(n<=1)
            return n;
        int elementBeforePrevious=0;
        int previous=1;
        for(int i=2;i<=n;i++)
        {
            int currentElement=elementBeforePrevious+previous;
            elementBeforePrevious=previous;
            previous=currentElement;
        }
        return previous;
    }
}

