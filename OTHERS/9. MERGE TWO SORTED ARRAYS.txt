// MERGE TWO SORTED ARRAYS
// TC=O(M+N) SC=O(M+N)
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int arr[]=new int[m+n];
        int i=0;
        int j=0;
        int k=0;
        while(i<m && j<n)
        {
            if(nums1[i]<=nums2[j])
            {
                arr[k]=nums1[i];
                i++;
                k++;
            }
            else
            {
                arr[k]=nums2[j];
                j++;
                k++;
            }
        }
        while(i<m)
        {
            arr[k]=nums1[i];
            k++;
            i++;
        }
        while(j<n)
        {
            arr[k]=nums2[j];
            k++;
            j++;
        }
        int p=0;
        for(int y=0;y<m;y++)
        {
            nums1[y]=arr[p];
            p++;
        }
        for(int y=0;y<n;y++)
        {
            nums2[y]=arr[p];
            p++;
        }

    }
}

//MORE TIME BUT ONTANT SPACE INVERSION SORT 
// TC=O(N*M) SC=O(1)

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i=0;
        int j=0;
        while(i<m)
        {
            if(nums1[i]<=nums2[j])
            {
                i++;
            }
            else
            {
                //swap
                int temp=nums1[i];
                nums1[i]=nums2[j];
                nums2[j]=temp;
                int k=j+1;
                while(k<n && temp>nums2[k])
                {
                    nums2[k-1]=nums2[k];
                    k++;
                }
                nums2[k-1]=temp;
                i++;
            }
        }
    }
}


//OPTIMAL TC=O((M+N)log(M+N))  SC=O(1)
// GAP ALGORITHM GAP=(int)Math.ceil((double(m+n)/2.0))
//after evry step gap is basically reduced to (int)Math.ceil((double)gap/2.0)
//do this until gap=1 is used

class Solution
{
    //Function to merge the arrays.
        public static void swap(int a[],int b[],int i,int j)
    {
        int temp=a[i];
        a[i]=b[j];
        b[j]=temp;
    }
    public static void merge(int[] nums1,int[] nums2, int m, int n) {
        int gap=(int)Math.ceil((double)(m+n)/2.0);
        
        while(gap>0)
        {
            int i=0;
            int j=gap;
            while(j<(m+n))
            {
                if(i<m && j<m && nums1[i]>nums1[j])
                {
                    swap(nums1,nums1,i,j);
                }
                else if(i<m && j>=m && nums1[i]>nums2[j-m])
                {
                    swap(nums1,nums2,i,j-m);
                }
                else if(i>=m && j>=m && nums2[i-m]>nums2[j-m])
                {
                    swap(nums2,nums2,i-m,j-m);
                }
                i++;
                j++;
            }
            if(gap==1)
                gap=0;
            else
                gap=(int)Math.ceil((double)gap/2.0);
        }
    }
}
