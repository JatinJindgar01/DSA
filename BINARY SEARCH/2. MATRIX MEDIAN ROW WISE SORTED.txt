//MATRIX MEDIAN OF ROW WISE SORTED MATRIX //NO OF ELEMEMTS ARE ODD

//BRUTE FORCE TC=O(M*N)LOG(M*N) SC=O(M*N)
//STORE ELEMENTS IN AN ARRAY. SORT THE ARRAY
//THE ELEMENT AT (N*M)/2 INDEX IS THE MEDIAN

 public static int Findmedian(int[][] arr, int row, int col) {
    int[] tmp = new int[row * col];
    int index = 0;
    for (int i = 0; i < row; i++) {
      for (int j = 0; j < col; j++) {
        tmp[index] = arr[i][j];
        index++;
      }
    }
    Arrays.sort(tmp);
    return tmp[(row* col) / 2];
  } 


//BINARY SEARCH
//TC= LOG(10^9)*NLOGM SC=O(1)
public static int countSmallerThanMid(int[] A, int mid, int n) {
    int l = 0, h = n - 1;
    while (l <= h) {
      int md = (l + h) >> 1;
      if (A[md] <= mid) {
        l = md + 1;
      } else {
        h = md - 1;
      }
    }
    return l;
  }
  public static int findMedian(int[][] A, int row, int col) {
    int low = 1;
    int high = 1000000000;
    int n = row;
    int m = col;
    while (low <= high) {
      int mid = (low + high) >> 1;
      int cnt = 0;
      for (int i = 0; i < n; i++) {
        cnt += countSmallerThanMid(A[i], mid, col);
      }
      if (cnt <= (n * m) / 2)
        low = mid + 1;
      else
        high = mid - 1;
    }
    return low;
  }