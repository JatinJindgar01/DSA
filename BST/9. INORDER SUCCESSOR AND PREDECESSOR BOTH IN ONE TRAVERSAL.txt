//INORDER SUCCESSOR AND PREDECESSOR BOTH IN ONE TRAVERSAL

//RECURSIVE TC=O(N) SC=O(N)

void findBoth(TreeNode root, TreeNode p, TreeNode successor, TreeNode predecessor)
{
if(root==null)
return;
else if(root.data<p.data)
{
predecessor=root;
findBoth(root.right,p,predecessor,successor);
}
else if(root.data>p.data)
{
successor=root;
findBoth(root.left,p,predecessor,successor);
}
else if(root.data==p.data)
{
findBoth(root.left,p,predecessor,successor);
findBoth(root.right,p,predecessor,successor);
}
}



//ITERATIVE TC=O(N) SC=O(1)

void findBoth(TreeNode root, TreeNode p, TreeNode successor, TreeNode predecessor)
{
if(root==null)
return;
while(root!=null)
{
if(root.data<p.data)
{
predecessor=root;
root=root.right;
}
else if(root.data>p.data)
{
successor=root;
root=root.left;
}
else if(root.data==p.data)
{
Node curr=root.right;
while(curr!=null)
{
successor=curr;
curr=curr.left;
}
Node curr1=root.left;
while(curr1!=null)
{
predecessor=curr;
curr=curr.right;
}
break;
}
}
}
