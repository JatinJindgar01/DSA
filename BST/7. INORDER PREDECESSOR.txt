//INORDER PREDECESSOR

//RECURSIVE TC=O(N) SC=O(N)

TreeNode Findpredecessor(TreeNode root, TreeNode p)
{
TreeNode predecessor=null;
aux(root,p,predecessor);
return predecessor;
}
void aux(TreeNode root, TreeNode p, TreeNode predecessor)
{
if(root==null)
return;
else if(root.data>=p.data)
aux(root.left,p,predecessor);
else
{
predecessor=root;
aux(root.right,p,predecessor);
}
}



//ITERATIVE TC=O(N) SC=O(1)


TreeNode Findpredecessor(TreeNode root, TreeNode p)
{

TreeNode predecessor=null;
TreeNode curr=root;
if(root==null)
return null;
while(curr!=null)
{
if(curr.data>=p.data)
curr=curr.left;
else
{
predecessor=root;
curr=curr.right;
}
}
return predecessor;
}