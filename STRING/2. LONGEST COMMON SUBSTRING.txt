//LONGEST COMMON SUBSTRING
//TABULATION
//TC=O(N*M) SC=O(N*M)
class Solution{
    int longestCommonSubstr(String S1, String S2, int n, int m){
        // code here
        int dp[][]=new int[n+1][m+1];
        int max=0;
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                 if(S1.charAt(i-1)==S2.charAt(j-1))
                 {
                     dp[i][j]=1+dp[i-1][j-1];
                     max=Math.max(max,dp[i][j]);
                 }
                else
                    dp[i][j]=0;
            }
        }
        return max;
    }
}

//SPACE OPTIMIZATION
//TC=O(N*M) SC=O(M)
class Solution{
    int longestCommonSubstr(String S1, String S2, int n, int m){
        // code here
        int prev[]=new int[m+1];
        int max=0;
        for(int i=1;i<=n;i++)
        {
            int curr[]=new int[m+1];
            for(int j=1;j<=m;j++)
            {
                 if(S1.charAt(i-1)==S2.charAt(j-1))
                 {
                     curr[j]=1+prev[j-1];
                     max=Math.max(max,curr[j]);
                 }
                else
                    curr[j]=0;
            }
            prev=curr;
        }
        return max;
    }
}


//PRINTING LONGEST COMMON SUBSTRING
//USING TABULATION
//TC=O(M*N) SC=O(M*N)
class Solution{

    int longestCommonSubstr(String S1, String S2, int n, int m){
        // code here
        int dp[][]=new int[n+1][m+1];
        int max=0;
        int ni=-1;
        int nj=-1;
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                 if(S1.charAt(i-1)==S2.charAt(j-1))
                 {
                     dp[i][j]=1+dp[i-1][j-1];
                     if(dp[i][j]>max)
                     {
                         max=dp[i][j];
                         ni=i;
                         nj=j;
                     }
                 }
                else
                    dp[i][j]=0;
            }
        }
        int len=max;
        String ans="";
        while(len!=0)
        {
            ans=S1.charAt(ni-1)+ans;
            ni--;
            len--;
        }
        System.out.println(ans);
        return max;
    }
}