//DETECT IF THERE IS A CYCLE IN LINKEDLIST

//USING HASHSET
//TC=O(N) SC=O(N)

public class Solution {
    public boolean hasCycle(ListNode head) {
	if(head==null || head.next==null)
        return false;
        HashSet<ListNode> h=new HashSet<>();
        ListNode tmp=head;
        while(tmp!=null)
        {
            if(h.contains(tmp))
                return true;
            h.add(tmp);
            tmp=tmp.next;
        }
        return false;
    }
}

//SLOW AND FAST POINTER
//TC=O(N) SC=O(1)

public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head==null || head.next==null)
        return false;
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null && fast.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
            if(slow==fast)
            return true;
        }
        return false;
    }
}