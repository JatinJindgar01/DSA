//ROTATE LINKEDLIST
//ITERATE K TIMES AND IN EVERY ITERATION PUT THE LAST NODE AS FIRST
//TC=O(N*K) SC=O(1)
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head==null || head.next==null)
            return head;
        int n=0;
        ListNode tmp=head;
        while(tmp!=null)
        {
            n++;
            tmp=tmp.next;
        }
        for(int i=0;i<k%n;i++)
        {
           ListNode t=head;
            ListNode prev=null;
           while(t.next!=null)
           {
              prev=t;
            t=t.next;
           }
            prev.next=null;
            t.next=head;
            head=t;
        }
        return head;
    }
}

//MAKE LAST NODE POINT TO HEAD, THEN MAKE THE NODE JUST PREV TO THE NODES TO ROTATED POINT TO NULL
//TC=O(N) SC=O(1)
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head==null || head.next==null)
            return head;
        int len=1;
        ListNode curr=head;
        while(curr.next!=null)
        {
            curr=curr.next;
            len++;
        }
        curr.next=head;
        ListNode t=head;
        for(int i=1;i<len-k%len;i++)
        {
            t=t.next;
        }
        head=t.next;
        t.next=null;
        return head;
    }
}