//FIND THE MIDDLE OF LINKEDLIST
//HashSet
//TC=O(N) SC=O(N)

class Solution {
    public ListNode middleNode(ListNode head) {
        if(head==null || head.next==null)
            return head;
        int len=0;
        ListNode t=head;
        HashMap<Integer,ListNode> h=new HashMap<>();
        while(t!=null)
        {
            h.put(len,t);
            t=t.next;
            len++;
        }
        int mid=(len-1)/2;
         return h.get(mid);
    }
}




//TC=O(N) SC=O(1)

class Solution {
    public ListNode middleNode(ListNode head) {
        if(head==null || head.next==null)
        return head;
        ListNode slow=head;
        ListNode fast=head;
        while(fast.next!=null && fast.next.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
}