// Remove Nth Node From End of List
//FIND LENGTH AND THEN N-K, DELETE THE N-KTH NODE
//TC=O(N) +O(N) SC=O(1)

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head==null)
            return null;
        ListNode tmp=head;
        int len=0;
        while(tmp!=null)
        {
            len++;
            tmp=tmp.next;
        }
        int req=len-n;
        if(req==0) //first node is to deleted
            head=head.next;
        else
        {
            tmp=head;
            for(int i=0;i<req-1;i++) //stand at prev node of node to be deleted
            {
                tmp=tmp.next;
            }
            tmp.next=tmp.next.next;
        }
            
        return head;
        
    }
}

//USING HASHMAP
//TC=O(N) SC=O(N)

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head==null)
            return null;
        ListNode tmp=head;
        int len=0;
        HashMap<Integer,ListNode> h=new HashMap<>();
        while(tmp!=null)
        {
            h.put(len,tmp);
            len++;
            tmp=tmp.next;
        }
        
        int element_index=len-n;
        int prev_ind=element_index-1;
        if(element_index==0) //first node is to deleted
        {
            head=head.next;
        }
        else
        {
            ListNode prev=h.get(prev_ind);
            prev.next=prev.next.next;
        }
            
        return head;
        
    }
}



// TC=O(N) SC=O(1)

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode p1=head;
        ListNode p2=head;
        for(int i=0;i<n;i++)
        {
            p1=p1.next;
        }
        Node prev=null;
        while(p1!=null)
        {
            p1=p1.next;
            prev=p2;
            p2=p2.next;
        }
        if(prev==null)
        head=p2.next;
        else
        {
            prev.next=p2.next;
        }
        return head;
    }
}
// ----------
// 1 2 3 4 5 6
// -------
// -
// 1
// -