//PREORDER INORDER AND POSTORDER IN SINGLE TRAVERSAL

//TC=O(N) SC=O(N)


import java.util.*;
class Node
{
int data;
Node left;
Node right;
Node(int data)
{
this.data=data;
left=null;
right=null;
}
}

class Pair
{
Node node;
int status;
Pair(Node node, int status)
{
this.node=node;
this.status=status;
}
}
class BinaryTree
{
Node root;

public void allTraversals()
{
String pre="";
String in="";
String post="";
Stack<Pair> st=new Stack<>();
st.push(new Pair(root,1));
while(st.size()>0)
{
Pair p=st.peek();
if(p.status==1)
{
//print in preorder
pre=pre+p.node.data+" ";
//update status
p.status=p.status+1;
//pust left child into stack
if(p.node.left!=null)
st.push(new Pair(p.node.left,1));
}
else if(p.status==2)
{
//print in inorder
in=in+p.node.data+" ";
//update status
p.status=p.status+1;
//pust right child into stack
if(p.node.right!=null)
st.push(new Pair(p.node.right,1));
}
else
{
//print in postorder
post=post+p.node.data+" ";
st.pop();
}
}
System.out.println(pre);
System.out.println(in);
System.out.println(post);
}
}
public class Main
{
public static void main(String[] args)
{
BinaryTree t=new BinaryTree();
t.root=new Node(1);
t.root.left=new Node(2);
t.root.right=new Node(3);
t.allTraversals();
}
}