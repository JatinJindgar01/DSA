POSTORDER TRAVERSAL
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */



//RECURSIVE TC=O(N) SC=O(N)
class Solution {
      public void inorder(TreeNode root, List<Integer> ans)
    {
        if(root==null)
            return;
       
        inorder(root.left,ans);
        inorder(root.right,ans);
           ans.add(root.val);
    }
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> ans=new ArrayList<>();
        inorder(root,ans);
        return ans;
    }
}


//ITERATIVE TC=O(N) SC=O(N)
class Solution {

    public List<Integer> postorderTraversal(TreeNode root) {
        LinkedList<Integer> ans=new LinkedList<>();
        if(root==null)
            return ans;
        Stack<TreeNode> st=new Stack<>();
        st.push(root);
        while(st.size()>0)
        {
            root=st.pop();
            ans.addFirst(root.val);
            if(root.left!=null)
                st.push(root.left);
            if(root.right!=null)
                st.push(root.right);
            }
        return ans;
    }
}



