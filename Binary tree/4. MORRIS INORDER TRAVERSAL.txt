//MORRIS INORDER TRAVERSAL
//TC=O(N) SC=O(1)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */



Approach:

The algorithm can be described as:

When we are currently at a node, the following cases can arise:

Case 1: When the current node has no left subtree. In this scenario, there is nothing to be traversed on the left side,
 so we simply print the value of the current node and move to the right of the current node.
Case 2: When there is a left subtree and the right-most child of this left subtree is pointing to null. 
In this case we need to set the right-most child to point to the current node, instead of NULL, 
print the current node value and move to the left of the current node.
Case 3: When there is a left subtree and the right-most child of this left-subtree is already 
pointing to the current node. In this case we know that the left subtree is already visited 
so we need to reset the last node to NULL and move the current node to its right. 
Note: Case 3 is very important as we need to remove the new links added to restore the original tree. 

To summarize, at a node whether we have to move left or right is determined whether the node has a left subtree. 
If it doesn’t we move to the right. If there is a left subtree then we see its rightmost child. 
If the rightmost child is pointing to NULL, we print the current node’s value and move it to its left. 
If the rightmost child is already pointing towards the current node, we remove that link and move to the right of the current node.
 We will stop the execution when the current points to null and we have traversed the whole tree.



class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> ans=new ArrayList<>();
        TreeNode curr=root;
        //when curr is equal to null it means all the nodes are done. It will happen when the right most node of tree is done as well.
        while(curr!=null)
        {   //No one in left subtree so just print the root node and go to right
            if(curr.left==null)
            {
                ans.add(curr.val);
                curr=curr.right;
            }
            else
            {
                //if left subtree is not null, it means we need to process left subtree                      before processing the curr
                
                //go to the rightmost node of the left subtree y using prev pointer
                TreeNode prev=curr.left;
                //the prev pointer will stop if it finds a null or a curr node in right of                      it
                while(prev.right!=null && prev.right!=curr)
                {
                    prev=prev.right;
                }
                //if prev.right is null it means we are visiting the left subtree for the first tym. so make prev.right point to curr and go to curr=curr.left
                if(prev.right==null)
                {
                    prev.right=curr;
                    curr=curr.left;
                }
                //if prev.right already poing to curr, it means left subtree is already processed. make the prev right point to null. print curr and move to right
                else
                {
                    prev.right=null;
                    ans.add(curr.val);
                    curr=curr.right;
                }
            }
        }
        return ans;
    }
}