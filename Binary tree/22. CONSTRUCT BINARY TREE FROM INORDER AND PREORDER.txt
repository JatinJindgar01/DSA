//CONSTRUCT BINARY TREE FROM INORDER AND PREORDER

//TC=O(N) SC=O(N)

class Solution {
    public TreeNode build(int preorder[], int preStart, int preEnd, int inorder[], int inStart,int inEnd, HashMap<Integer,Integer> h)
    {
        if(preEnd-preStart<0 || inEnd-inStart<0)
            return null;
        //find the root index in inorder
        int rootIndexInInorder=h.get(preorder[preStart]);
        int countLeft=rootIndexInInorder-inStart;
        int countRight=inEnd-rootIndexInInorder;
        TreeNode n=new TreeNode(preorder[preStart]);
        n.left=build(preorder,preStart+1,preStart+countLeft,inorder,inStart,rootIndexInInorder-1,h);
 n.right=build(preorder,preStart+countLeft+1,preEnd,inorder,rootIndexInInorder+1,inEnd,h); 
        return n;
        
        
    }
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        HashMap<Integer,Integer> h=new HashMap<>();
        for(int i=0;i<inorder.length;i++)
        {
            h.put(inorder[i],i);
        }
        TreeNode t=build(preorder,0,preorder.length-1,inorder,0,inorder.length-1,h);
        return t;
    }
    
}