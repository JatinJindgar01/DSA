//MAXIMUM WIDTH OF BINARY TREE
//TC=O(N) SC=O(N)
//USING LEVEL ORDER TRAVEL AND KEEPING TRACK OF INDICES

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */


//1 BASED INDEXING IS USED SO IF ROOT IS I THEN LEFT=2*I+1 AND RIGHT=2*I+2
class Solution {
    class Pair
    {
        TreeNode node;
        int index;
        Pair(TreeNode node, int index )
        {
            this.node=node;
            this.index=index;
        }
    }
    public int widthOfBinaryTree(TreeNode root) {
        if(root==null)
            return 0;
        Queue<Pair> q=new LinkedList<>();
        q.add(new Pair(root,1));
        int max=0;
        while(q.size()>0)
        {
            int n=q.size();
            //MINIMUM INDEX AT EACH LEAVEL IS ALWAYS BE THE FIRST NODE AT THAT LEVEL
            int min=q.peek().index;
            int first=0;
            int last=0;
            for(int i=0;i<n;i++)
            {
                Pair p=q.poll();
                int curr_index=p.index-min;
                if(i==0)
                first=p.index;
                if(i==n-1)
                last=p.index;
                if(p.node.left!=null)
                    q.add(new Pair(p.node.left,curr_index*2+1));
                if(p.node.right!=null)
                    q.add(new Pair(p.node.right,curr_index*2+2));
            }
            max=Math.max(max,last-first+1);
            
        }
        return max;
    }
}