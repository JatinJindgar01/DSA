//INORDER TRAVERSAL OF BINARY TREE

//RECURSIVE TC=O(N) SC=O(N)
class Solution {
    public void inorder(TreeNode root, List<Integer> ans)
    {
        if(root==null)
            return;
        //left, root, right
        inorder(root.left,ans);
        ans.add(root.val);
        inorder(root.right,ans);
            
    }
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> ans=new ArrayList<>();
        inorder(root,ans);
        return ans;
    }
}


//ITERATIVE TC=O(N) SC=O(N)
/*
Make a stack
have a while true loop
pust the current node into stack and make node=node.left till node is not eual to null
once the node is null
if the stack is empty, then the traversal is over just break
else
it's tym to pop elelment from stack and print. also make node = node.right


*/


class Solution{
       public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> ans=new ArrayList<>();
        Stack<TreeNode> st=new Stack<>();
           while(true)
           {
               if(root!=null)
               {
                   st.push(root);
                   root=root.left;
               }
               else
               {
                   if(st.size()==0)
                       break;
                   else
                   {
                       root=st.pop();
                       ans.add(root.val);
                       root=root.right;
                   }
               }
           }
           return ans;
    }
}